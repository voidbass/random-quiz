{"version":3,"sources":["images/nattu-adnan-unsplash.jpg","API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["module","exports","Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","key","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","EASY","setDifficulty","setAmount","startTrivia","newQuestions","changeDifficulty","event","target","htmlFor","type","name","onChange","e","min","max","id","checked","MEDIUM","HARD","undefined","currentTarget","prev","answerObject","length","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16817045.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nattu-adnan-unsplash.c11f97a3.jpg\";","import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionsState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty): Promise<QuestionsState[]> => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n  }))\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react';\n// Types\nimport { AnswerObject } from '../App';\n// Styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className='number'>\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper\n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","import styled, { createGlobalStyle } from \"styled-components\";\nimport BGImage from \"./images/nattu-adnan-unsplash.jpg\";\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n\n  body {\n    background: url(${BGImage}) center center no-repeat fixed;\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n\n  .flex-radio{\n    display: flex;\n    justify-content: space-between;\n    width: 70%;\n  }\n\n  .label{\n    font-size: 24px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #fff;\n  }\n\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start {\n    max-width: 200px;\n  }\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n// types\nimport { QuestionsState, Difficulty } from \"./API\";\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionsState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [difficulty, setDifficulty] = useState(Difficulty.EASY);\n  const [amount, setAmount] = useState(10);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(amount, difficulty);\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: any) => {\n    if (!gameOver) {\n      // User's answer\n      const answer = e.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save the answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQ = number + 1;\n\n    if (nextQ === amount) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQ);\n    }\n  };\n\n  const changeDifficulty = (event: any) => {\n    setDifficulty(event.target.value);\n  };\n\n  const restartGame = () => {\n    setGameOver(true);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setQuestions([]);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        {gameOver ? (\n          <>\n            <div>\n              <label className=\"label\" htmlFor=\"amount\">\n                Amount: &nbsp;\n              </label>\n              <input\n                type=\"number\"\n                name=\"amount\"\n                onChange={(e: any) => setAmount(e.target.value)}\n                min=\"1\"\n                max=\"20\"\n                value={amount}\n                className=\"label\"\n              />\n            </div>\n            <br />\n            <div className=\"flex-radio\">\n              <div>\n                <input\n                  className=\"radio-button\"\n                  type=\"radio\"\n                  id=\"easy\"\n                  name=\"difficulty\"\n                  checked={difficulty === Difficulty.EASY ? true : false}\n                  value={Difficulty.EASY}\n                  onChange={(e) => changeDifficulty(e)}\n                />\n                <label className=\"label\" htmlFor=\"easy\">\n                  Easy\n                </label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"medium\"\n                  value={Difficulty.MEDIUM}\n                  checked={difficulty === Difficulty.MEDIUM ? true : false}\n                  onChange={(e) => changeDifficulty(e)}\n                />\n                <label className=\"label\" htmlFor=\"medium\">\n                  Medium\n                </label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  name=\"difficulty\"\n                  id=\"hard\"\n                  value={Difficulty.HARD}\n                  checked={difficulty === Difficulty.HARD ? true : false}\n                  onChange={(e) => changeDifficulty(e)}\n                />\n                <label className=\"label\" htmlFor=\"hard\">\n                  Hard\n                </label>\n              </div>\n            </div>\n            <br />\n            <button className=\"start\" onClick={startTrivia}>\n              Start\n            </button>\n          </>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={amount}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== amount - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n        {userAnswers.length === number + 1 && userAnswers.length === +amount ? (\n          <button className=\"next\" onClick={restartGame}>\n            Restart Game\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}